#!/usr/bin/env python3

import os
import sys
import sh
from langchain_core.prompts import PromptTemplate
from langchain_openai import ChatOpenAI
from langchain_core.pydantic_v1 import BaseModel, Field

myself = sys.argv[0]

git = sh.git.bake("--no-pager")

if not os.getenv("GPTCOMMIT"):
    exit(0)

commit_msg_file =  sys.argv[1]
diff = git.diff("--cached")

class GitMessage(BaseModel):
    subject: str = Field(description="The subject of the git message")
    message_body: str = Field(
        description="The message body of the git message")

prompt_template = """
你是一个专家级程序员，能够写出清晰易懂的commit message
用英文写commit message, 需要包含subject和message_body两个部分
其中对于subject， 要求如下:
1. 综合考虑各个被修改的文件，根据Linux kernel git commit style guide生成subject
2. 只产生一行，不要超过50个字符

对于message_body, 要求如下
1. 总结各个文件的修改，每个总结一行，以‘-’字符开头
2. 每个总结都要准确，如果怀疑不准确，则不输出
3. 每个总结都要清晰，易懂

========= patch start ==============
{patch}
========= patch end ================

以json的形式返回，包含`subject`和`message_body`字段，message_body字段格式为字符串
"""
prompt = PromptTemplate(
    input_variables=["patch"], template=prompt_template
)

llm = ChatOpenAI(
    model="gpt-3.5-turbo").with_structured_output(GitMessage, method="json_mode")
chain = prompt | llm

output = chain.invoke(diff)
subject = output.subject
message = output.message_body
commit_msg = f"{subject}\n\n{message}"

content = None
with open(commit_msg_file) as fd:
    content = fd.read()

msg = commit_msg + content

with open(commit_msg_file, "w") as fd:
    fd.write(msg)
